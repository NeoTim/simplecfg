/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This is test data, not real code! This file is parsed by the Java API analyzer tests
 * to check that no findings are reported for this file.
 */
import java.io.Closeable;
import java.io.FileInputStream;

/* Negative findings for the already-closed analyzer. */
class AlreadyClosedNegativeFindings01 {

  static class MyCloseable {
    public void close() {
    }
    public void write() {
    }
  }

  void f1() {
    // MyCloseable does not implement java.io.Closeable, so it should not cause findings.
    MyCloseable closeable = new MyCloseable();
    closeable.close();
    closeable.write();
  }

  void f2() {
    while (true) {
      // This is a new instance each iteration, so close is only called once per instance.
      Closeable in = new FileInputStream("x");
      in.read();
      in.close();
      if (System.currentTimeMillis() % 2 == 1) {
        break;
      }
  }

  void f3() {
    // This local variable is not effectively final, so it should not be analyzed.
    Closeable in = new FileInputStream("x");
    in.read();
    in.close();
    in = new FileInputStream("y");
    in.read();
  }

  void f4() {
    // This local variable is not effectively final, so it should not be analyzed.
    Closeable in = new FileInputStream("x");
    in.read();
    in.close();
    in = new FileInputStream("y");
    in.read();
  }

  void f5(Closeable in) {
    // Repeated calls to close() are allowed and do not produce findings.
    in.close();
    in.close();
    in.close();
    in.close();
    in.close();
  }

  String f6(ByteArrayOutputStream out) {
    out.close();
    return out.toString(); // Negative finding: calling toString() after close() is okay.
  }

  byte[] f7(ByteArrayOutputStream out) {
    out.close();
    return out.toByteArray(); // Negative finding: calling toByteArray() after close() is okay.
  }
}
