/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This is test data, not real source code!
 * StmtCfgTest builds and tests the CFG for the first block/method in this class.
 */
import javax.annotation.Nullable;

/**
 * Test nullable dereferences guarded/not guarded by null checks.
 */
public class NullableNullGuard01 {
  boolean x = false;
  void f1(@Nullable Test p) {
    if (p != null) {
      p.f1(p); // negative
    }
  }
  boolean f2(@Nullable Test p) {
    return p == null || p.f1(p); // negative
  }
  boolean f3(@Nullable Test p) {
    return p == null ? false : p.f1(p); // negative
  }
  boolean f4(@Nullable Test p) {
    return p != null ? p.f1(p) : false; // negative
  }
  boolean f5(@Nullable Test p) {
    return p != null || p.f1(p); // positive
  }
  boolean f5(@Nullable Test p) {
    p = null;
    return p.x; // negative
  }
  boolean f5(@Nullable Test p) {
    return p.x; // positive
  }
  void f6(@Nullable Test p) {
    if (p == null) return;
    p.x = true; // negative
  }
  void f6(@Nullable Test p) {
    while (true) {
      if (p == null) break;
      p.x = true; // negative
    }
  }
  void f6(@Nullable Test p) {
    while (p.x) { // positive
      if (p == null) continue;
      p.x = false; // negative
    }
  }
  void f7(@Nullable Test p) {
    while (p == null) {
    }
    p.x = false; // Negative: not reachable.
  }
  void f8(@Nullable Test p) {
    while (p == null) {
      if (System.currentTimeMillis() & 1 == 0) {
        return;
      }
    }
    p.x = false; // Negative.
  }
}
