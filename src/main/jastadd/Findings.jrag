/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.google.common.collect.Lists;

import java.util.Collection;
import java.util.LinkedList;

/**
 * This aspect provides the general attributes to collect findings for the
 * available analyses.
 */
aspect Findings {
  /** Collection of API usage findings.  */
  coll Collection<ExtendJFinding> CompilationUnit.findings()
      [new LinkedList<ExtendJFinding>()]
      with add
      root CompilationUnit;

  /** Build a new finding with the given subcategory and message.  */
  syn ExtendJFinding ASTNode.finding(String subcategory, String message) {
    ASTNode location = locationNode();
    return new ExtendJFinding(sourceFile(), subcategory, message,
        getLine(location.getStart()), getColumn(location.getStart()),
        getLine(location.getEnd()), getColumn(location.getEnd()));
  }

  /** Find the closest AST node with source location information.  */
  syn ASTNode ASTNode.locationNode() {
    ASTNode node = this;
    while (node.getParent() != null && node.getStart() == 0) {
      node = node.getParent();
    }
    return node;
  }

  /** Find the indentation for the current statement.  */
  inh String Stmt.indentation();

  /** Find the indentation for the current expression.  */
  inh String Expr.indentation();

  /** Find the indentation for the current type declaration.  */
  inh String TypeDecl.indentation();

  eq Block.getChild().indentation() = indentation() + "  ";
  eq TypeDecl.getChild().indentation() = indentation() + "  ";

  eq CompilationUnit.getChild().indentation() = "";
  eq Program.getChild().indentation() = "";

  /** A finding produced by an ExtendJ analyzer.  */
  public class ExtendJFinding {

    public final String sourcePath;
    public final String subcategory;
    public final String message;
    public final int startLine;
    public final int startColumn;
    public final int endLine;
    public final int endColumn;
    public final Collection<ExtendJFix> fixes = Lists.newArrayList();

    /**
     * Describes a suggested fix. The suggested fix has a description which does not seem to
     * show up in Critique. The new text should end with a newline.
     */
    public static class ExtendJFix {
      public final String description;
      public final int startLine;
      public final int endLine;
      public final String newText;

      ExtendJFix(String description, int startLine, int endLine, String newText) {
        this.description = description;
        this.startLine = startLine;
        this.endLine = endLine;
        this.newText = newText;
      }
    }

    public ExtendJFinding(String sourcePath, String subcategory, String message,
        int startLine, int startColumn, int endLine, int endColumn) {
      this.sourcePath = sourcePath;
      this.subcategory = subcategory;
      this.message = message;
      this.startLine = startLine;
      this.startColumn = startColumn;
      this.endLine = endLine;
      this.endColumn = endColumn;
    }

    /**
     * Set a new suggested fix for this finding.
     */
    public ExtendJFinding addFix(String description, int startLine, int endLine, String newText) {
      fixes.add(new ExtendJFix(description, startLine, endLine, newText));
      return this;
    }

    @Override
    public String toString() {
      // This message is printed for each finding when running the CLI.
      return String.format("%s:%d:%d: %s", sourcePath, startLine, startColumn, message);
    }
  }
}
