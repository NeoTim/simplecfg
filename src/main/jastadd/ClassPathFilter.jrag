/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Replace type lookup to avoid parsing extra sources.
 * All sources other than the one that is being analyzed is replaced
 * by the Unknown type, or a placeholder type - a TypeDecl with just
 * a name and package.
 */
aspect ClassPathFilter {

  /** The type lookup filter to use during type lookups.  */
  private TypeLookupFilter Program.typeLookupFilter = PASSTHROUGH_TYPE_FILTER;

  /** Changes the type lookup filter.  */
  public void Program.setTypeLookupFilter(TypeLookupFilter filter) {
    typeLookupFilter = filter;
  }

  public interface TypeLookupFilter {
    /**
     * This allows extra source type map initialization. It is run after the default source type map
     * initialization code.
     */
    void initializeSourceTypeMap(Program program);
    /**
     * This allows extra library type map initialization. It is run after the default library type
     * map initialization code.
     */
    void initializeLibraryTypeMap(Program program);

    /**
     * Returns the TypeDecl for the requested type. Returns UnknownType if the type was not
     * found, or if the type was filtered out by this filter.
     */
    TypeDecl lookupSourceType(Program program, String packageName, String typeName);

    /**
     * Returns the TypeDecl for the requested type. Returns UnknownType if the type was not
     * found, or if the type was filtered out by this filter.
     */
    TypeDecl lookupLibraryType(Program program, String packageName, String typeName);
  }

  /** This type filter does not perform any filtering. */
  public static final TypeLookupFilter Program.PASSTHROUGH_TYPE_FILTER = new TypeLookupFilter() {
    @Override
    public void initializeSourceTypeMap(Program program) {
    }

    @Override
    public void initializeLibraryTypeMap(Program program) {
    }

    @Override
    public TypeDecl lookupSourceType(Program program, String packageName, String typeName) {
      return program.lookupSourceType(packageName, typeName);
    }

    @Override
    public TypeDecl lookupLibraryType(Program program, String packageName, String typeName) {
      return program.lookupLibraryType(packageName, typeName);
    }
  };

  /** This type filter filters out library types. */
  public static final TypeLookupFilter Program.LIBRARY_TYPE_FILTER = new TypeLookupFilter() {
    @Override
    public void initializeSourceTypeMap(Program program) {
    }

    @Override
    public void initializeLibraryTypeMap(Program program) {
      // All types that need to be distinguishable in the code being analyzed
      // should be added as placeholders here.
      // This list contains all types which are looked up explicitly in the
      // ExtendJ frontend code with lookupType(pkg, name) All type lookups that
      // don't match a placeholder type get mapped to the Unknown type.
      program.addPlaceholderType("java.lang", "Object");
      program.addPlaceholderType("java.lang", "AutoCloseable");
      program.addPlaceholderType("java.lang", "Class");
      program.addPlaceholderType("java.lang", "Cloneable");
      program.addPlaceholderType("java.lang", "Error");
      program.addPlaceholderType("java.lang", "Exception");
      program.addPlaceholderType("java.lang", "FunctionalInterface");
      program.addPlaceholderType("java.lang", "NullPointerException");
      program.addPlaceholderType("java.lang", "Throwable");
      program.addPlaceholderType("java.lang", "Enum");
      program.addPlaceholderType("java.lang", "Iterable");
      program.addPlaceholderType("java.lang", "Iterator");
      program.addPlaceholderType("java.lang", "RuntimeException");

      // Annotations and boxed primitive types are required
      // to do some simple type analysis.

      // Add annotation types.
      program.addPlaceholderType("java.lang.annotation", "Target");
      program.addPlaceholderType("java.lang.annotation", "Retention");
      program.addPlaceholderType("java.lang.annotation", "Inherited");
      program.addPlaceholderType("java.lang", "SuppressWarnings");
      program.addPlaceholderType("java.lang", "Override");
      program.addPlaceholderType("java.lang", "Serializable");

      // Boxed primitive types.
      program.addPlaceholderType("java.lang", "Integer");
      program.addPlaceholderType("java.lang", "Float");
      program.addPlaceholderType("java.lang", "Short");
      program.addPlaceholderType("java.lang", "Byte");
      program.addPlaceholderType("java.lang", "Character");
      program.addPlaceholderType("java.lang", "Long");
      program.addPlaceholderType("java.lang", "Double");
      program.addPlaceholderType("java.lang", "String");
      program.addPlaceholderType("java.lang", "Boolean");
      program.addPlaceholderType("java.lang", "Void");

      // Types needed for read/write after close analysis.
      program.addPlaceholderType("java.io", "Writer");
      program.addPlaceholderType("java.io", "Reader");

      // Types needed for Nullable Dereference analysis.
      program.addPlaceholderType("javax.annotation", "Nullable");
    }

    @Override
    public TypeDecl lookupSourceType(Program program, String packageName, String typeName) {
      return program.lookupSourceType(packageName, typeName);
    }

    @Override
    public TypeDecl lookupLibraryType(Program program, String packageName, String typeName) {
      String fullName = packageName.isEmpty() ? typeName : packageName + "." + typeName;
      if (program.libraryTypeMap.containsKey(fullName)) {
        return program.libraryTypeMap.get(fullName);
      } else {
        program.libraryTypeMap.put(fullName, program.unknownType());
        return program.unknownType();
      }
    }
  };

  refine LookupFullyQualifiedTypes
  protected void Program.initializeSourceTypeMap() {
    refined();
    typeLookupFilter.initializeSourceTypeMap(this);
  }

  refine LookupFullyQualifiedTypes
  protected void Program.initializeLibraryTypeMap() {
    refined();
    typeLookupFilter.initializeLibraryTypeMap(this);
  }

  refine LookupFullyQualifiedTypes
  eq Program.lookupType(String packageName, String typeName) {
    TypeDecl sourceType = typeLookupFilter.lookupSourceType(this, packageName, typeName);
    if (!sourceType.isUnknown()) {
      return sourceType;
    }
    if (!libraryTypeMapInitialized) {
      initializeLibraryTypeMap();
      libraryTypeMapInitialized = true;
    }
    return typeLookupFilter.lookupLibraryType(this, packageName, typeName);
  }

  /**
   * Add a placeholder type declaration to the library type map.
   * This triggers evaluation of a placeholder type NTA and a placeholder
   * compilation unit NTA.
   */
  private void Program.addPlaceholderType(String packageName, String typeName) {
    String fullName = packageName.equals("") ? typeName : packageName + "." + typeName;
    CompilationUnit cu = placeholderCompilationUnit(packageName);
    cu.setFromSource(false);
    cu.setClassSource(ClassSource.NONE);
    TypeDecl placeholder = cu.placeholderTypeDecl(typeName);
    libraryTypeMap.put(fullName, placeholder);
  }

  /**
   * Build a placeholder compilation unit for types in a package.
   */
  syn nta CompilationUnit Program.placeholderCompilationUnit(String packageName) {
    CompilationUnit u = new CompilationUnit();
    u.setPackageDecl(packageName);
    return u;
  }

  /**
   * Build placeholder type declaration.
   */
  syn nta TypeDecl CompilationUnit.placeholderTypeDecl(String typeName) {
    PlaceholderTypeDecl decl = new PlaceholderTypeDecl();
    decl.setModifiers(new Modifiers(new List().add(new Modifier("public"))));
    decl.setID(typeName);
    return decl;
  }

}

