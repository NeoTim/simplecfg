/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Adds an analysis checking for calls to an instance of java.io.Writer or java.io.Reader after
 * {@code close()} has been called on the same instance.
 * <p>
 * For each method call to an effectively final variable of type java.io.Reader or java.io.Writer,
 * we do a breadth-first search on the reverse CFG from the location of that call to see if a
 * call to {@code close()} was made on the same instance previously.
 */
aspect AlreadyClosedAnalysis {

  MethodAccess contributes alreadyClosedFinding()
      when alreadyClosedStream()
      to CompilationUnit.findings()
      for compilationUnit();

  /** Allow MethodAccess to lookup the enclosing compilation unit.  */
  inh CompilationUnit MethodAccess.compilationUnit();

  /** Generate a finding for method call after close() call.  */
  syn lazy ExtendJFinding MethodAccess.alreadyClosedFinding() =
      finding("AlreadyClosed", String.format(
          "close() may have already been called on %s at this point",
          prevExpr().prettyPrint()));

  /** Check if the reciever of this method access was already closed. */
  syn boolean MethodAccess.alreadyClosedStream() {
    // The receiver must be an effectively final local variable (or parameter).
    if (name().equals("close") // Don't check for repeated close() calls.
        || name().equals("toString") || name().equals("toByteArray")
        || !hasPrevExpr() // Does not have a variable or parameter receiver.
        || prevExpr().varDecl() == null // Receiver is not a variable/parameter.
        || !(prevExpr().varDecl().isFinal()
            || prevExpr().varDecl().isEffectivelyFinal()) // Receiver might have changed.
        || !prevExpr().type().isCloseable()) { // Receiver is not instance of java.io.Closeable.
      return false;
    }
    final Variable receiver = prevExpr().varDecl();
    return null != call().reverseBfs(new CfgVisitor() {
      @Override
      public SearchAction processEdge(CfgNode pred, CfgNode succ) {
        if (succ.isCloseCall(receiver)) {
          if (pred.isException()) {
            // This call is interrupted by an exception. Don't continue the search from this node.
            return SearchAction.SKIP;
          } else {
            return SearchAction.SUCCESSOR_MATCH;
          }
        }
        if (succ.isCall() && succ.isCall(receiver)) {
          return SearchAction.SKIP;
        }
        if (succ.isDeclarationOf(receiver)) {
          // Skip this node and don't reconsider any other path that encounters the node.
          return SearchAction.IGNORE;
        }
        return SearchAction.CONTINUE;
      }
    });
  }

  /** Test if the CFG node is a call node with the given variable as receiver. */
  syn boolean CfgNode.isCall(Variable receiver) = false;
  eq CfgMethodCall.isCall(Variable receiver) = methodAccess().hasReceiver(receiver);

  /** Test if the CFG node is a call node for receiver.close(). */
  syn boolean CfgNode.isCloseCall(Variable receiver) = false;
  eq CfgMethodCall.isCloseCall(Variable receiver) =
      methodAccess().hasReceiver(receiver) && methodAccess().getID().equals("close");

  /** Check if this is a Reader or Writer.  */
  syn boolean TypeDecl.isCloseable() =
      !isUnknown() && instanceOf(lookupType("java.io", "Closeable"));

  syn boolean MethodAccess.hasReceiver(Variable receiver) =
      hasPrevExpr() && prevExpr().isVariable(receiver);

  /**
   * Test if the CFG node is tied to a statement that declares the variable,
   * or if the declaration of the variable is somewhere inside the statement this
   * branch represents.
   */
  syn boolean CfgNode.isDeclarationOf(Variable var) = false;

  eq CfgBranch.isDeclarationOf(Variable var) =
      branchDeclaresVariable(var)
      || variableDeclaredInsideStatement(var);

  syn boolean CfgBranch.variableDeclaredInsideStatement(Variable var) {
    Stmt stmt = hostStatement();
    ASTNode node = (ASTNode) var;
    while (node != stmt && node != null) {
      node = node.getParent();
    }
    return node == stmt;
  }

  /** The statement this branch represents.  */
  inh Stmt CfgBranch.hostStatement();

  /** The statement this expression is part of.  */
  inh Stmt Expr.hostStatement();
  eq Stmt.getChild().hostStatement() = this;
  eq Program.getChild().hostStatement() = null;

  eq IfStmt.branch().hostStatement() = this;
  eq ConditionalExpr.branch().hostStatement() = hostStatement();
  eq ForStmt.branch().hostStatement() = this;
  eq WhileStmt.branch().hostStatement() = this;
  eq DoStmt.branch().hostStatement() = this;
  eq EnhancedForStmt.branch().hostStatement() = this;
  eq SwitchStmt.branch().hostStatement() = this;

  /** Test if the CFG node is tied to a statement that declares the variable. */
  inh boolean CfgBranch.branchDeclaresVariable(Variable var);

  eq EnhancedForStmt.branch().branchDeclaresVariable(Variable var) =
      getVariableDeclaration() == var;
  eq IfStmt.branch().branchDeclaresVariable(Variable var) = false;
  eq ConditionalExpr.branch().branchDeclaresVariable(Variable var) = false;
  eq ForStmt.branch().branchDeclaresVariable(Variable var) = false;
  eq WhileStmt.branch().branchDeclaresVariable(Variable var) = false;
  eq DoStmt.branch().branchDeclaresVariable(Variable var) = false;
  eq SwitchStmt.branch().branchDeclaresVariable(Variable var) = false;

  /** Return true if this node corresponds to a branch. */
  syn boolean CfgNode.isException() = false;
  eq CfgException.isException() = true;

}
