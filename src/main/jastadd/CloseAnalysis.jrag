/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

aspect CloseAnalysis {

  MethodAccess contributes alreadyClosedFinding()
      when alreadyClosedStream()
      to CompilationUnit.findings()
      for compilationUnit();

  /** Allow MethodAccess to lookup the enclosing compilation unit.  */
  inh CompilationUnit MethodAccess.compilationUnit();

  /** Generate a finding for method call after close() call.  */
  syn lazy ExtendJFinding MethodAccess.alreadyClosedFinding() =
      finding("CloseCheck",
          String.format("close() may have already been called on %s at this point",
          prevExpr().prettyPrint()));

  /** Check if the reciever of this method access was already closed. */
  syn boolean MethodAccess.alreadyClosedStream() {
    // The receiver must be an effectively final local variable (or parameter).
    if (name().equals("close") // Don't check for repeated close() calls.
        || !hasPrevExpr() // Does not have a variable or parameter receiver.
        || prevExpr().varDecl() == null // Receiver is not a variable/parameter.
        || !(prevExpr().varDecl().isFinal()
          || prevExpr().varDecl().isEffectivelyFinal()) // Receiver might have changed.
        || !prevExpr().type().isWriterOrReader()) { // Receiver is not Reader/Writer.
      return false;
    }
    final Variable receiver = prevExpr().varDecl();
    return null != call().reverseBfs(new CfgVisitor() {
      @Override
      public SearchAction processEdge(CfgNode pred, CfgNode succ) {
        if (succ.isCloseCall(receiver)) {
          return SearchAction.SUCCESSOR_MATCH;
        }
        if (succ.isCall() && succ.isCall(receiver)) {
          return SearchAction.SKIP;
        }
        return SearchAction.CONTINUE;
      }
    });
  }

  /** Test if the CFG node is a call node with the given variable as receiver. */
  syn boolean CfgNode.isCall(Variable receiver) = false;
  eq CfgMethodCall.isCall(Variable receiver) = methodAccess().hasReceiver(receiver);

  /** Test if the CFG node is a call node for receiver.close(). */
  syn boolean CfgNode.isCloseCall(Variable receiver) = false;
  eq CfgMethodCall.isCloseCall(Variable receiver) =
      methodAccess().hasReceiver(receiver) && methodAccess().getID().equals("close");

  /** Check if this is a Reader or Writer.  */
  syn boolean TypeDecl.isWriterOrReader() =
      (name().equals("Writer") || name().equals("Reader"))
      && packageName().equals("java.io");

  syn boolean MethodAccess.hasReceiver(Variable receiver) =
      hasPrevExpr() && prevExpr().isVariable(receiver);
}
