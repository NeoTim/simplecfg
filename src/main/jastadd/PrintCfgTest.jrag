/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.util.Set;

import java.util.Collections;
import java.util.Queue;
import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.Queue;
import java.util.LinkedList;

/** Attributes useful for generating a test case from a CFG. */
aspect PrintCfgTest {

  /** Generate a test case from the CFG of this body decl. */
  public void BodyDecl.printCfgTest() {
    CfgNode entry = entry();
    String className = hostType().name();
    String testName = className.substring(0, 1).toLowerCase()
        + className.substring(1);
    System.out.println("  @Test public void " + testName + "() {");
    System.out.println("    CfgNode entry = parseCfg(\"" + className + "\");");
    Queue<CfgNode> work = new LinkedList<CfgNode>();
    Set<CfgNode> visited = Collections.newSetFromMap(
        new IdentityHashMap<CfgNode, Boolean>());
    visited.add(entry);
    Map<CfgNode, String> vars = new HashMap<CfgNode, String>();
    vars.put(entry, entry.toString());
    Map<String, Integer> nextIds = new HashMap<String, Integer>();
    nextIds.put("entry", 2);
    work.add(entry);
    while (!work.isEmpty()) {
      CfgNode node = work.poll();
      boolean testSuccs = node.printAssert(visited, vars, nextIds);
      if (testSuccs) {
        for (CfgNode succ : node.successors()) {
          if (!visited.contains(succ)) {
            visited.add(succ);
            work.add(succ);
          }
        }
      }
    }
    System.out.println("  }");
  }

  /**
   * @return {@code true} if successors should be tested.
   */
  protected boolean CfgNode.printAssert(
      Set<CfgNode> visited,
      Map<CfgNode, String> vars,
      Map<String, Integer> nextIds) {
    Set<? extends CfgNode> successors = successors();
    if (successors.size() == 1) {
      CfgNode succ = successors.iterator().next();
      String nodeName = nextVarName(succ.varName(), nextIds);
      if (!visited.contains(succ)) {
        vars.put(succ, nodeName);
        System.out.println(String.format(
            "    CfgNode %s = succ(%s, \"%s\");",
            nodeName, vars.get(this), succ.name()));
      } else {
        System.out.println(String.format(
            "    assertThat(succ(%s, \"%s\")).isSameAs(%s);",
            vars.get(this), succ.name(), vars.get(succ)));
      }
    } else if (successors.size() > 1) {
      boolean duplicates = false;
      Set<String> dups = new HashSet<String>();
      for (CfgNode succ : successors) {
        if (dups.contains(succ.name())) {
          duplicates = true;
          break;
        }
        dups.add(succ.name());
      }
      if (duplicates) {
        System.out.print(String.format(
            "    assertThat(%s.successors()).containsExactly(\"",
            vars.get(this)));
        boolean first = true;
        for (CfgNode succ : successors) {
          if (!first) {
            System.out.print("\", \"");
          }
          first = false;
          System.out.print(succ.name());
        }
        System.out.println("\");");
        System.out.println(String.format(
            "    // NOTE Code to test the successors of %s was not "
            + "auto-generated\n    // due to identical successor names.",
            vars.get(this)));
        return false;
      } else {
        String arrayName = nextVarName(this.varName() + "Succ", nextIds);
        System.out.print(String.format(
            "    CfgNode[] %s = succ(%s",
            arrayName, vars.get(this)));
        int index = 0;
        Map<String, CfgNode> succMap = new HashMap<String, CfgNode>();
        for (CfgNode succ : successors) {
          System.out.format(", \"%s\"", succ.name());
          succMap.put(arrayName + "[" + index + "]", succ);
          index += 1;
        }
        System.out.println(");");
        for (Map.Entry<String, CfgNode> succ : succMap.entrySet()) {
          if (!visited.contains(succ.getValue())) {
            vars.put(succ.getValue(), succ.getKey());
          } else {
            System.out.println(String.format(
                "    assertThat(%s).isSameAs(%s);",
                succ.getKey(), vars.get(succ.getValue())));
          }
        }
      }
    }
    return true;
  }

  protected static String CfgNode.nextVarName(String name,
      Map<String, Integer> nextIds) {
    if (nextIds.containsKey(name)) {
      int id = nextIds.get(name);
      nextIds.put(name, id+1);
      return name + id;
    } else {
      nextIds.put(name, 2);
      return name;
    }
  }

  syn String CfgNode.varName() = name();
  eq CfgBranch.varName() = branchKind() + "Branch";
  eq CfgException.varName() = "exception";
  eq CfgMarker.varName() = markerVarName();
  eq CfgMethodCall.varName() = methodAccess().getID();

  inh String CfgBranch.branchKind();
  eq IfStmt.branch().branchKind() = "if";
  eq ConditionalExpr.branch().branchKind() = "if";
  eq ForStmt.branch().branchKind() = "for";
  eq WhileStmt.branch().branchKind() = "while";
  eq DoStmt.branch().branchKind() = "doWhile";
  eq EnhancedForStmt.branch().branchKind() = "for";
  eq SwitchStmt.branch().branchKind() = "switch";

  inh String CfgMarker.markerVarName();
  eq BreakStmt.marker().markerVarName() = "breakMarker";
  eq ContinueStmt.marker().markerVarName() = "continueMarker";
  eq ConditionalExpr.thenEndMarker().markerVarName() = "thenEnd";
  eq ConditionalExpr.elseEndMarker().markerVarName() = "elseEnd";
  eq IfStmt.thenEndMarker().markerVarName() = "thenEnd";
  eq IfStmt.elseEndMarker().markerVarName() = "elseEnd";
  eq ReturnStmt.marker().markerVarName() = "returnMarker";
  eq TryStmt.tryEntryMarker().markerVarName() = "tryEntry";
  eq Program.getChild().markerVarName() = "marker";
  eq AbstractDot.nullableDereferenceMarker().markerVarName() = "nullable";
}
